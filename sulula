#!/usr/bin/env python3

# Copyright Â© 2017-2020 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import getpass
import http.cookiejar
import re
import subprocess
import sys
import urllib.request

import lxml.html
import yaml

f''  # Python >= 3.6 is required

prog = argparse.ArgumentParser().prog

class UserAgent(object):

    ident = 'Mozilla/5.0 (Windows NT 10.0; rv:78.0) Gecko/20100101 Firefox/78.0'
    logging = None

    def __init__(self, *, host):
        cookie_jar = http.cookiejar.CookieJar()
        cookie_proc = urllib.request.HTTPCookieProcessor(cookie_jar)
        self.opener = urllib.request.build_opener(cookie_proc)
        self.base_url = f'https://{host}/'
        self.headers = {
            'User-Agent': self.ident,
            'Accept-Language': 'en-US,en;q=0.5',
        }

    def _request(self, url, *, data):
        url = urllib.parse.urljoin(self.base_url, url)
        if self.logging is not None:
            print('*', url, file=self.logging)
        request = urllib.request.Request(
            url,
            headers=self.headers,
            data=data,
        )
        with self.opener.open(request) as response:
            return response.read()

    def get(self, url):
        return self._request(url, data=None)

    def post(self, url, *, data):
        return self._request(url, data=data)

def parse_html(s):
    html_parser = lxml.html.HTMLParser(encoding='UTF-8')
    return lxml.html.document_fromstring(s, parser=html_parser)

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('--host', metavar='HOST', required=True)
    ap.add_argument('--user', metavar='USER', required=True)
    ap.add_argument('--password-eval', metavar='COMMAND', help='use password from the COMMAND\'s stdout')
    ap.add_argument('--with-returned', action='store_true')
    ap.add_argument('--verbose', action='store_true')
    options = ap.parse_args()
    host = options.host
    if '.' not in options.host:
        host = f'{host}.sowa.pl'
    if options.password_eval is not None:
        proc = subprocess.run(
            options.password_eval,
            shell=True,
            stdout=subprocess.PIPE,
            universal_newlines=True,
            check=True,
        )
        password = proc.stdout.rstrip('\n')
    else:
        password = getpass.getpass(f'{host} password: ')
    user = options.user
    ua = UserAgent(host=host)
    if options.verbose:
        ua.logging = sys.stderr
    url_tmpl = '/sowacgi.php?KatID=0&typ=acc&id={page}'
    url = url_tmpl.format(page='info')
    data = ua.get(url)
    html = parse_html(data)
    [form] = html.xpath('//form[@name="log"]')
    form.inputs['swww_user'].value = user
    form.inputs['swww_pass'].value = password
    form_data = form.form_values()
    form_data = urllib.parse.urlencode(form_data, quote_via=urllib.parse.quote)
    form_data = form_data.encode('ASCII')
    data = {}
    html = ua.post(form.action, data=form_data)
    try:
        html = parse_html(html)
        [elt] = html.xpath('.//div[@id="acc-info-barcode-no"]')
        data['card-no'] = elt.text.strip()
        [elt] = html.xpath('.//div[@id="acc-info-data-name"]')
        data['name'] = elt.text.strip()
        [elt] = html.xpath('.//div[@id="acc-info-data-birthday"]/div[last()]')
        data['birth-date'] = elt.text.strip()
        [elt] = html.xpath('.//div[@id="acc-info-data-main-addr"]/div[last()]')
        text = [line.strip() for line in elt.text.strip().splitlines()]
        data['home-address'] = text
        [elt] = html.xpath('.//div[@id="acc-info-data-phone"]/div[last()]')
        data['phone'] = elt.text.strip()
        [elt] = html.xpath('.//div[@id="acc-info-addr-items"]//div[@class="acc-info-protected"]')
        data['email'] = elt.text.strip()
        [elt] = html.xpath('.//div[@id="acc-info-summary-items"]/div[last()]/b')
        text = elt.text.strip()
        assert text.count('.') == 0
        assert text.count(',') == 1
        text = text.replace(',', '.')
        data['balance'] = text
        for page in 'onloan', 'reserved', 'returned':
            if page == 'returned' and not options.with_returned:
                continue
            key = re.sub('^on', 'on-', page)
            items = data[key] = []
            url = url_tmpl.format(page=page)
            html = ua.get(url)
            html = parse_html(html)
            record_elts = html.xpath('//div[@data-recid]')
            for record_elt in record_elts:
                item = {}
                items += [item]
                [elt] = record_elt.xpath('.//span[@class="desc-o-title"]')
                item['title'] = str(elt.text_content())
                [elt] = record_elt.xpath('.//div[@data-agenda]/span[@class="acct-agenda"]')
                item['agenda'] = elt.text
                elts = record_elt.xpath('.//div[@data-agenda]/span[@class="acct-date"]')
                for key, elt in zip(('from', 'to'), elts):
                    key = 'date-' + key
                    text = elt.text.strip()
                    text = re.sub(r'\A([0-3][0-9])[.]([01][0-9])[.]([0-9]{4})\Z', r'\3-\2-\1', text)
                    item[key] = text
                if page == 'reserved':
                    [elt] = record_elt.xpath('.//div[@data-agenda]/span[@class="acct-rezdate"]')
                    text = elt.text.strip()
                    text = re.sub(r'\A([0-3][0-9])[.]([01][0-9])[.]([0-9]{4})(?=\s)', r'\3-\2-\1', text)
                    item['request-date'] = text
                    elts = record_elt.xpath('.//span[@class="acct-isfirst"]')
                    if elts:
                        [elt] = elts
                        match = re.match(r'\bYou are in the (\d+) place in the queue\b', elt.text)
                        n = int(match.group(1))
                        item['queue-pos'] = n
        yaml.dump(data, stream=sys.stdout, sort_keys=False, allow_unicode=True)
    finally:
        url = url_tmpl.format(page='logout')
        ua.get(url)
        pass

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
